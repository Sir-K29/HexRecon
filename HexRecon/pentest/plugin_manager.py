import os
import glob
import importlib.util
import logging
from .config import PLUGIN_DIR
from .utils import save_scan_results

class Plugin:
    def __init__(self, module):
        self.module = module
        self.name = getattr(module, "PLUGIN_NAME", module.__name__)
        self.description = getattr(module, "PLUGIN_DESCRIPTION", "No description provided.")
        self.commands = getattr(module, "PLUGIN_COMMANDS", {})  # Available commands (dict)
        self.required_tools = getattr(module, "REQUIRED_TOOLS", [])

    def run(self, target, command=""):
        """Always call the plugin's run() with two arguments."""
        if hasattr(self.module, "run"):
            try:
                return self.module.run(target, command)
            except Exception as e:
                logging.error(f"Error running {self.name} on {target}: {e}")
                return f"Error: {e}"
        else:
            return f"Plugin {self.name} does not implement a run() method."

def load_plugins():
    """Load all Python modules from the PLUGIN_DIR as plugins."""
    plugins = []
    if not os.path.isdir(PLUGIN_DIR):
        logging.error(f"Plugin directory not found: {PLUGIN_DIR}")
        return plugins
    pattern = os.path.join(PLUGIN_DIR, "*.py")
    for file_path in glob.glob(pattern):
        base = os.path.basename(file_path)
        if base.startswith("__"):
            continue
        module_name = os.path.splitext(base)[0]
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        module = importlib.util.module_from_spec(spec)
        try:
            spec.loader.exec_module(module)
            plugins.append(Plugin(module))
            logging.info(f"Loaded plugin: {module_name}")
        except Exception as e:
            logging.error(f"Failed to load plugin {module_name}: {e}")
    return plugins
